services:
  # PostgreSQL for device states and commands
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PostgreSQL Exporter for metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
      PG_EXPORTER_DISABLE_DEFAULT_METRICS: "false"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9187/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis/redis-stack-server:latest
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cassandra for telemetry storage
  cassandra:
    image: cassandra:4
    container_name: cassandra
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra
    environment:
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
      - CASSANDRA_CLUSTER_NAME=iot_cluster
    restart: unless-stopped
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
      interval: 30s
      timeout: 5s
      retries: 10

  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka for message queue
  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka1
    hostname: kafka1
    ports:
      - "9092:9092"
    volumes:
      - kafka1_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka2
    hostname: kafka2
    ports:
      - "9093:9093"
    volumes:
      - kafka2_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka3
    hostname: kafka3
    ports:
      - "9094:9094"
    volumes:
      - kafka3_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 10

  # Schema Registry for Avro contracts
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: schema-registry
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: ${SCHEMA_REGISTRY_HOST_NAME}
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092
    depends_on:
      kafka1:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/subjects" ]
      interval: 30s
      timeout: 5s
      retries: 5

  # Kafka Exporter for metrics
  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    restart: unless-stopped
    command:
      - "--kafka.server=kafka1:9092"
      - "--kafka.server=kafka2:9093"
      - "--kafka.server=kafka3:9094"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9308/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8070:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8080" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak for authentication and authorization
  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: keycloak
    command: start-dev
    restart: unless-stopped
    ports:
      - "9091:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: ${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: localhost
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    depends_on:
      - postgres
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "curl", "f", "http://localhost:8080/health/ready" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Camunda for process orchestration
  camunda:
    image: camunda/camunda-bpm-platform:run-7.19.0
    container_name: camunda
    restart: unless-stopped
    ports:
      - "8088:8080"
    environment:
      DB_DRIVER: org.postgresql.Driver
      DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - camunda_data:/camunda
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/engine-rest/engine" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      prometheus:
        condition: service_healthy
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    user: "root"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/loki-config.yaml:ro
      - loki_chunks:/tmp/loki/chunks
      - loki_index:/tmp/loki/index
      - loki_rules:/tmp/loki/rules
    networks:
      - iot-platform-net

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    user: root
    ports:
      - "9080:9080"  # HTTP-интерфейс Alloy (по умолчанию)
    volumes:
      - ./monitoring/alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
    environment:
      GRAFANA_LOKI_URL: http://loki:3100/loki/api/v1/push  # локальный Loki
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:9080
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    networks:
      - iot-platform-net

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    volumes:
      - ./monitoring/tempo/tempo.yml:/etc/tempo/tempo.yaml
      - tempo_data:/var/tempo
    ports:
      - "3200:3200"
    depends_on:
      - create-tempo-bucket
    networks:
      - iot-platform-net

  # MinIO for object storage (DLT + attachments)
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - iot-platform-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 5

  create-tempo-bucket:
    image: minio/mc
    container_name: create-tempo-bucket
    entrypoint: >
      /bin/sh -c "
        sleep 10 && \
        mc alias set minio http://minio:9000 tempo tempo-tempo && \
        mc mb -p minio/tempo && \
        mc anonymous set download minio/tempo
      "
    depends_on:
      - minio
    networks:
      - iot-platform-net

volumes:
  postgres_data:
  redis_data:
  cassandra_data:
  zookeeper_data:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  minio_data:
  keycloak_data:
  camunda_data:
  grafana_data:
  loki_data:
  loki_chunks:
  loki_index:
  loki_rules:
  tempo_data:

networks:
  iot-platform-net:
    driver: bridge
